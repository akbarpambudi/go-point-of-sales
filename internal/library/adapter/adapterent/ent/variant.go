// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/akbarpambudi/go-point-of-sales/internal/library/adapter/adapterent/ent/product"
	"github.com/akbarpambudi/go-point-of-sales/internal/library/adapter/adapterent/ent/variant"
	"github.com/google/uuid"
)

// Variant is the model entity for the Variant schema.
type Variant struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VariantQuery when eager-loading is set.
	Edges            VariantEdges `json:"edges"`
	product_variants *uuid.UUID
}

// VariantEdges holds the relations/edges for other nodes in the graph.
type VariantEdges struct {
	// Product holds the value of the product edge.
	Product *Product `json:"product,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VariantEdges) ProductOrErr() (*Product, error) {
	if e.loadedTypes[0] {
		if e.Product == nil {
			// The edge product was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: product.Label}
		}
		return e.Product, nil
	}
	return nil, &NotLoadedError{edge: "product"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Variant) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case variant.FieldPrice:
			values[i] = &sql.NullFloat64{}
		case variant.FieldCode, variant.FieldName:
			values[i] = &sql.NullString{}
		case variant.FieldID:
			values[i] = &uuid.UUID{}
		case variant.ForeignKeys[0]: // product_variants
			values[i] = &uuid.UUID{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Variant", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Variant fields.
func (v *Variant) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case variant.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				v.ID = *value
			}
		case variant.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				v.Code = value.String
			}
		case variant.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				v.Name = value.String
			}
		case variant.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				v.Price = value.Float64
			}
		case variant.ForeignKeys[0]:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field product_variants", values[i])
			} else if value != nil {
				v.product_variants = value
			}
		}
	}
	return nil
}

// QueryProduct queries the "product" edge of the Variant entity.
func (v *Variant) QueryProduct() *ProductQuery {
	return (&VariantClient{config: v.config}).QueryProduct(v)
}

// Update returns a builder for updating this Variant.
// Note that you need to call Variant.Unwrap() before calling this method if this Variant
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Variant) Update() *VariantUpdateOne {
	return (&VariantClient{config: v.config}).UpdateOne(v)
}

// Unwrap unwraps the Variant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Variant) Unwrap() *Variant {
	tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Variant is not a transactional entity")
	}
	v.config.driver = tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Variant) String() string {
	var builder strings.Builder
	builder.WriteString("Variant(")
	builder.WriteString(fmt.Sprintf("id=%v", v.ID))
	builder.WriteString(", code=")
	builder.WriteString(v.Code)
	builder.WriteString(", name=")
	builder.WriteString(v.Name)
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", v.Price))
	builder.WriteByte(')')
	return builder.String()
}

// Variants is a parsable slice of Variant.
type Variants []*Variant

func (v Variants) config(cfg config) {
	for _i := range v {
		v[_i].config = cfg
	}
}
